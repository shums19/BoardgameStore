@model BoardgameStore.Models.Boardgame

@{
    ViewBag.Title = "Добавление игры";
}

<h2 style="color: #32A4B8; font-weight: 700" >Добавление игры</h2>
<hr />
@using (Html.BeginForm("Create", "Home",
FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4 style="color: #32A4B8; font-weight: 700" >Новая игра</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.boardgame_name, "Название", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.boardgame_name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.boardgame_name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.min_time, "Минимальное время партии", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.min_time, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.min_time, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.max_time, "Максимальное время партии", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.max_time, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.max_time, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.min_players, "Минимальное количество игроков", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.min_players, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.min_players, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.max_players, "Максимальное количество игроков", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.max_players, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.max_players, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.cover_path, "Обложка", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" id="upload-cover" name="image" accept="image/*"  class="form-control"/><br>
            <div id="cover-image"></div>

            @*@Html.EditorFor(model => model.cover_path, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.cover_path, "", new { @class = "text-danger" })*@
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.years, "Возрастное ограничение", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.years, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.years, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.language, "Язык", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.language, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.language, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.boardgame_number, "Количество на складе", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.boardgame_number, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.boardgame_number, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.boardgame_cost, "Цена", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.boardgame_cost, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.boardgame_cost, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.independence, "Игра независимая?", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.independence, new { htmlAttributes = new { @class = "form-control", @style = "width: 200px" } })
                @Html.ValidationMessageFor(model => model.independence, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    @*<div class="form-group">
        @Html.LabelFor(model => model.images_paths, "", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.images_paths, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.images_paths, "", new { @class = "text-danger" })
        </div>
    </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.preview_description, "Описание на превью", htmlAttributes: new { @class = "control-label col-md-2", @maxlength = "100" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.preview_description, 5, 50, htmlAttributes: new { @class = "form-control" })
            @*@Html.EditorFor(model => model.preview_description, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.preview_description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.full_description, "Полное описание", htmlAttributes: new { @class = "control-label col-md-2", @maxlength = "500" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.full_description, 10, 50, htmlAttributes: new { @class = "form-control" })
            @*@Html.EditorFor(model => model.full_description, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.full_description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.boardgame_equipment, "Комплектация", htmlAttributes: new { @class = "control-label col-md-2", @maxlength = "500" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.boardgame_equipment, 10, 50, htmlAttributes: new { @class = "form-control" })
            @*@Html.EditorFor(model => model.boardgame_equipment, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.boardgame_equipment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.author_id, "Автор", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("author_id", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.author_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.publisher_id, "Издательство", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("publisher_id", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.publisher_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.complexity_id, "Сложность", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("complexity_id", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.complexity_id, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@

<script>
    function showFile(e) {
        var f = e.target.files[0];
        //for (var i = 0, f; f = files[i]; i++) {
        if (f.type.match('image.*')) {
            if (f.length > 2048) {
                var para = document.createElement('p');
                document.getElementById('cover-image').innerHTML = '<p>Файл ' + f.name + ' имеет слишком большой размер. Загрузите изображение менее 2МБ. Иначе будет использоваться изображение по умолчанию.</p>';
            }
            else {
                var fr = new FileReader();
                fr.onload = (function (theFile) {
                    return function (e) {
                        var div = document.createElement('div');
                        document.getElementById('cover-image').innerHTML = "<img src='" + e.target.result + "' style='width: 100px; height: auto' />";
                    };
                })(f);
                fr.readAsDataURL(f);
            }
        }
        else {
            var para = document.createElement('p');
            document.getElementById('cover-image').innerHTML = '<p>Файл ' + f.name + ' не является изображением. Загрузите изображение.</p>';
        }

    }

  document.getElementById('upload-cover').addEventListener('change', showFile, false);
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
